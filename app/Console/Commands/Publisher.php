<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Order;
use App\Services\TelegramService;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;

class Publisher extends Command
{
    protected $signature = 'publish {--order= : Test specific order by ID}';
    protected $description = 'Publish approved orders to auction channel';

    public function handle()
    {
        // Check if test mode for specific order
        $testOrderId = $this->option('order');
        
        if ($testOrderId) {
            $order = Order::find($testOrderId);
            if (!$order) {
                $this->error("Order #{$testOrderId} not found");
                return;
            }
            $this->publishToAuction($order);
            return true;
        }
        
        // Normal mode
        $this->line('Starting auction publishing...');
        
        $startTime = time();
        $maxExecutionTime = 55;
        
        while (true) {
            if (time() - $startTime >= $maxExecutionTime) {
                $this->line('Execution time limit reached');
                break;
            }
            
            $processed = $this->processNextOrder();
            
            if (!$processed) {
                $this->line('No orders to publish, sleeping 1 second...');
                sleep(1);
            }
        }
        
        $this->line('Publishing completed');
    }

    private function processNextOrder(): bool
    {
        $order = null;
        
        DB::transaction(function () use (&$order) {
            $order = Order::where('text_admin_check', Order::TEXT_ADMIN_CHECK_INWORK)
                ->whereNull('auction_status')
                ->with(['telegramUser', 'media'])
                ->lockForUpdate()
                ->first();
                
            if ($order) {
                $order->update(['auction_status' => Order::AUCTION_STATUS_PUBLISHING]);
            }
        });
        
        if (!$order) {
            return false;
        }
        
        try {
            $this->line("Starting to publish order #{$order->id} (lot: {$order->lot_name})");
            $this->publishToAuction($order);
            
            $this->line("‚úÖ Successfully published order #{$order->id}");
            return true;

        } catch (\Exception $e) {
            $errorMsg = "‚ùå Failed to publish order #{$order->id}: " . $e->getMessage();
            Log::error($errorMsg, [
                'order_id' => $order->id,
                'lot_name' => $order->lot_name,
                'exception' => $e->getTraceAsString()
            ]);
            $this->error($errorMsg);
            
            $order->update(['auction_status' => Order::AUCTION_STATUS_FAILED]);
            return true;
        }
    }


    /**
     * –ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞–∫–∞–∑ –≤ –∫–∞–Ω–∞–ª –∞—É–∫—Ü–∏–æ–Ω–∞
     * 
     * –ü—Ä–æ—Ü–µ—Å—Å:
     * 1. –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
     * 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–æ—Ç–µ  
     * 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∞—É–∫—Ü–∏–æ–Ω–∞
     * 4. –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π "–î–µ–ª–∞–π—Ç–µ –≤–∞—à–∏ —Å—Ç–∞–≤–∫–∏" –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
     * 5. –§–æ—Ä–≤–∞—Ä–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
     * 6. –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ë–î
     */
    private function publishToAuction(Order $order): void
    {
        // –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        $channelId = config('services.auction.channel_id');        // –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –∞—É–∫—Ü–∏–æ–Ω–∞ (@auctiong1)
        $repostGroupId = config('services.auction.repost_group_id'); // –ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∞ (@Haifa_myLife)
        $repostTopicId = config('services.auction.repost_topic_id'); // –¢–æ–ø–∏–∫ –≤ –≥—Ä—É–ø–ø–µ

        $this->line("üìã Channel ID: {$channelId}");
        $this->line("üìã Repost Group: {$repostGroupId}");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if (!$channelId) {
            throw new \Exception('AUCTION_CHANNEL_ID not configured in services.auction.channel_id');
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ª–æ—Ç, —Ü–µ–Ω–∞, –ª–æ–∫–∞—Ü–∏—è –∏ —Ç.–¥.)
        $text = $this->formatOrder($order);
        
        // –®–ê–ì 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∞—É–∫—Ü–∏–æ–Ω–∞ (—Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –ø—Ä–∏ 502/503 –æ—à–∏–±–∫–∞—Ö)
        $this->line("üì§ Sending message to channel {$channelId}...");
        $result = $this->sendWithRetry(function() use ($channelId, $text, $order) {
            return TelegramService::sendMessage($channelId, $text, '', 'auction_'.$order->id, $order->media);
        });
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        $messageId = $this->extractMessageId($result);
        if (!$messageId) {
            $this->error("‚ùå Failed to extract message ID from result");
            if (is_object($result) && isset($result->error)) {
                throw new \Exception("Failed to post to channel: " . $result->error);
            }
            throw new \Exception('Failed to post to channel - no message ID returned');
        }

        $this->line("‚úÖ Posted to channel, message ID: {$messageId}");

        // –®–ê–ì 2: –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        // –ò—â–µ–º –∞–≤—Ç–æ-—Ñ–æ—Ä–≤–∞—Ä–¥ –≤ discussion group –∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π thread_id
        $reply_to_message_id = $this->findAutoForwardThreadId($messageId);
        
        if ($reply_to_message_id) {
            $this->line("‚úÖ Found auto-forward thread ID: {$reply_to_message_id}");
            $discussionGroupId = config('services.auction.discussion_group_id');
            
            $this->line("üí¨ Sending comment to thread {$reply_to_message_id}...");
            $commentResult = TelegramService::sendMessage($discussionGroupId, "–î–µ–ª–∞–π—Ç–µ –≤–∞—à–∏ —Å—Ç–∞–≤–∫–∏", '', 
                'auction_comm_'.$order->id, [], null, null, $reply_to_message_id);
                        
            $commentMessageId = $this->extractMessageId($commentResult);
            
            if ($commentMessageId) {
                $this->line("‚úÖ Comment sent successfully, message ID: {$commentMessageId}");
            } else {
                $this->error("‚ùå Failed to send comment to thread");
            }
        } else {
            $this->error("‚ùå Could not find auto-forward in discussion group");
            $commentMessageId = null;
        }

        // –®–ê–ì 3: –§–æ—Ä–≤–∞—Ä–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
        // –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ—Ç–æ–≤ –≤ –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã/–≥—Ä—É–ø–ø—ã
        if ($repostGroupId) {
            $this->line("üîÑ Forwarding message {$messageId} to repost group {$repostGroupId}...");
            $forwardResult = TelegramService::forwardMessage($channelId, $repostGroupId, $messageId, $repostTopicId);
  
            if ($forwardResult && $forwardResult->response) {
                $response = json_decode($forwardResult->response, true);
                if (isset($response['ok']) && $response['ok']) {
                    $this->line("‚úÖ Message forwarded successfully to repost group (ID: {$response['result']['message_id']})");
                } else {
                    $this->error("‚ùå Failed to forward message to repost group");
                }
            } else {
                $this->error("‚ùå No response from forward request");
            }
        } else {
            $this->line("‚ÑπÔ∏è No repost group configured, skipping forward");
        }

        // –®–ê–ì 4: –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î - —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"
        $this->line("üíæ Updating order #{$order->id} in database...");
        $order->update([
            'auction_message_id' => $messageId,           // ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
            'auction_comment_message_id' => $commentMessageId, // ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å null)
            'auction_status' => Order::AUCTION_STATUS_PUBLISHED, // –°—Ç–∞—Ç—É—Å "–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"
            'auction_posted_at' => now(),                 // –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        ]);
        
        $this->line("üéâ Order #{$order->id} published successfully!");
        $this->line("   üìù Channel message ID: {$messageId}");
        $this->line("   üí¨ Comment message ID: " . ($commentMessageId ?: 'none'));
        $this->line("   üìä Status: " . Order::AUCTION_STATUS_PUBLISHED);
    }

    private function formatOrder(Order $order): string
    {
        $text = "";
        
        // –õ–æ—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ
        if ($order->lot_name) {
            $text .= "<b>–õ–æ—Ç:</b> {$order->lot_name}\n";
        }
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –æ–ø–∏—Å–∞–Ω–∏–µ
        if ($order->text) {
            $text .= "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> {$order->text}\n";
        }
        
        // –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
        if ($order->bid) {
            $text .= "<b>–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞:</b> {$order->bid}‚Ç™\n";
        }
        
        // –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (–ø–æ–∫–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏–º)
        $text .= "<b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b> 10‚Ç™\n";
        
        // –ó–∞–±–∏—Ä–∞—Ç—å: –ª–æ–∫–∞—Ü–∏–∏
        if ($order->locations) {
            $text .= "<b>–ó–∞–±–∏—Ä–∞—Ç—å:</b> {$order->locations}\n";
        }
        
        $text .= "üëâ<b>–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ª–æ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ:</b> ";
        $text .= " üëà\n";
        $text .= "<b>–ñ–µ–ª–∞–µ—à—å —Å—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –ø–∏—à–∏ –ª—Å:</b> @AuctionsIsrBot\n";
        $text .= "<b>–ö–∞–Ω–∞–ª –∞—É–∫—Ü–∏–æ–Ω–∞:</b> https://t.me/Auction_Israel\n";
        $text .= "<b>–û—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞:</b> https://t.me/+55aFKrgFFBUxN2Zi";
        
        return $text;
    }

    private function extractMessageId($result): ?int
    {
        if (!$result || !isset($result->message_id)) {
            return null;
        }
        
        $messageIds = $result->message_id;
        
        if (!is_array($messageIds) || empty($messageIds)) {
            return null;
        }
        
        return $messageIds[array_key_last($messageIds)];
    }

    /**
     * –ò—â–µ—Ç –∞–≤—Ç–æ-—Ñ–æ—Ä–≤–∞—Ä–¥ –≤ discussion group —á–µ—Ä–µ–∑ request_logs –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç thread_id
     */
    private function findAutoForwardThreadId(int $originalMessageId): ?int 
    {
        $discussionGroupId = config('services.auction.discussion_group_id');
        
        if (!$discussionGroupId) {
            $this->error("No discussionGroupId found");
            return null;
        }
        
        $this->line("üîç Looking for auto-forward of message {$originalMessageId} in request logs...");
        
        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ-—Ñ–æ—Ä–≤–∞—Ä–¥ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        for ($attempt = 1; $attempt <= 10; $attempt++) {
            $this->line("üîÑ Attempt {$attempt}/10...");
            
            // –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            $channelId = config('services.auction.channel_id');
            
            // –ò—â–µ–º –≤ request_logs webhook –∑–∞–ø—Ä–æ—Å—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–æ—Ä–≤–∞—Ä–¥–∞–º–∏
            $requestLogs = \App\Models\RequestLog::where('url', 'LIKE', '%/api/telegram/assistant_webhook%')
                ->where('created_at', '>=', now()->subMinutes(5)) // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
                ->where('request_data', 'LIKE', '%"is_automatic_forward":true%') // —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–≤–∞—Ä–¥—ã
                ->where('request_data', 'LIKE', '%"forward_from_message_id":' . $originalMessageId . '%') // –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                ->where('request_data', 'LIKE', '%"chat":{"id":' . $discussionGroupId . '%') // –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É
                ->orderBy('created_at', 'desc')
                ->limit(1) // –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º 1 –∑–∞–ø–∏—Å—å
                ->get();
                
            $this->line("üìã Checking {$requestLogs->count()} webhook requests...");
                
            foreach ($requestLogs as $log) {
                $requestData = json_decode($log->request_data, true);
                
                if (!$requestData || !isset($requestData['message'])) {
                    continue;
                }
                
                $message = $requestData['message'];
                
                // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ä–≤–∞—Ä–¥–∞
                if (isset($message['is_automatic_forward']) && 
                    $message['is_automatic_forward'] === true &&
                    isset($message['forward_from_message_id']) &&
                    $message['forward_from_message_id'] == $originalMessageId) {
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ—Ä–≤–∞—Ä–¥ –∏–¥–µ—Ç –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É
                    $fromChannelId = $message['forward_from_chat']['id'] ?? null;
                    $toGroupId = $message['chat']['id'] ?? null;
                    
                    // –¢–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ –Ω–∞—à—É discussion –≥—Ä—É–ø–ø—É
                    if ($fromChannelId == $channelId && $toGroupId == $discussionGroupId) {
                        $threadId = $message['message_id'];
                        $this->line("‚úÖ Perfect match! Thread ID: {$threadId}");
                        return $threadId;
                    } else {
                        $this->line("‚ùå Channel/Group mismatch, continuing search...");
                    }
                }
            }
            
            $this->line("‚è≥ Auto-forward not found yet, waiting 2 seconds...");
            sleep(2);
        }
        
        $this->error("‚ùå Auto-forward not found after 10 attempts");
        return null;
    }



    private function getCommentLink(string $channelId, int $messageId): string
    {
        $cleanId = ltrim($channelId, '@-');
        return "https://t.me/{$cleanId}/{$messageId}";
    }

    private function addLinkToText(string $text, string $link): string
    {
        return str_replace(
            'üëâ<b>–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ª–æ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ:</b>  üëà',
            "üëâ<b>–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ª–æ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ:</b> {$link} üëà",
            $text
        );
    }

    private function sendWithRetry(callable $callback, int $maxRetries = 3)
    {
        for ($attempt = 1; $attempt <= $maxRetries; $attempt++) {
            $result = $callback();
            
            // Check if result contains 502/503 error
            if (is_object($result) && isset($result->error)) {
                $error = $result->error;
                if (str_contains($error, '"error_code":502') || str_contains($error, '"error_code":503')) {
                    $this->line("‚ö†Ô∏è  Attempt {$attempt}: Telegram server error (502/503), retrying in 2 seconds...");
                    if ($attempt < $maxRetries) {
                        sleep(2);
                        continue;
                    }
                }
            }
            
            return $result;
        }
        
        return $result;
    }
}
